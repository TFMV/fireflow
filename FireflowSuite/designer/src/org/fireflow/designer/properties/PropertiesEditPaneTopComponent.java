/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package org.fireflow.designer.properties;

import java.awt.BorderLayout;
import java.awt.Component;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.io.Serializable;
import java.util.logging.Logger;
import org.fireflow.designer.datamodel.IFPDLElement;
import org.openide.explorer.ExplorerManager;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.Mode;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;
//import org.openide.util.Utilities;
/**
 * Top component which displays something.
 */
public final class PropertiesEditPaneTopComponent extends TopComponent
        implements PropertyChangeListener {

    Component editor = null;
    private static PropertiesEditPaneTopComponent instance;
    /** path to the icon used by the component and its open action */
//    static final String ICON_PATH = "SET/PATH/TO/ICON/HERE";
    private static final String PREFERRED_ID = "PropertiesEditPaneTopComponent";

    private PropertiesEditPaneTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(PropertiesEditPaneTopComponent.class, "CTL_PropertiesEditPaneTopComponent"));
        setToolTipText(NbBundle.getMessage(PropertiesEditPaneTopComponent.class, "HINT_PropertiesEditPaneTopComponent"));
//        setIcon(Utilities.loadImage(ICON_PATH, true));
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());
    }// </editor-fold>//GEN-END:initComponents
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized PropertiesEditPaneTopComponent getDefault() {
        if (instance == null) {
            instance = new PropertiesEditPaneTopComponent();
        }
        return instance;
    }

    /**
     * Obtain the PropertiesEditPaneTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized PropertiesEditPaneTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            Logger.getLogger(PropertiesEditPaneTopComponent.class.getName()).warning(
                    "Cannot find " + PREFERRED_ID + " component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof PropertiesEditPaneTopComponent) {
            return (PropertiesEditPaneTopComponent) win;
        }
        Logger.getLogger(PropertiesEditPaneTopComponent.class.getName()).warning(
                "There seem to be multiple components with the '" + PREFERRED_ID +
                "' ID. That is a potential source of errors and unexpected behavior.");
        return getDefault();
    }

    @Override
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }

    @Override
    public void open(){
        Mode m = WindowManager.getDefault().findMode("properties");
        if (m != null) {
            m.dockInto(instance);
        }        
        super.open();
    }
    
    @Override
    public void componentOpened() {
    // TODO add custom code on component opening
    }

    @Override
    public void componentClosed() {
    // TODO add custom code on component closing
    }

    /** replaces this in object stream */
    @Override
    public Object writeReplace() {
        return new ResolvableHelper();
    }

    @Override
    protected String preferredID() {
        return PREFERRED_ID;
    }

    final static class ResolvableHelper implements Serializable {

        private static final long serialVersionUID = 1L;

        public Object readResolve() {
            return PropertiesEditPaneTopComponent.getDefault();
        }
    }

    public void propertyChange(PropertyChangeEvent evt) {

        if (evt.getPropertyName().equals(ExplorerManager.PROP_SELECTED_NODES)) {
            // issue 11928 check if selecetion mode will be broken
            Node[] nodes = (Node[]) evt.getNewValue();
            for (int i = 0; nodes != null && i < nodes.length; i++) {
                Node node = nodes[i];
                if (node!=null && (node instanceof IFPDLElement)) {
                    IFPDLElement fpdlElement = (IFPDLElement) node;
                    if (editor != null) {
                        this.remove(editor);
                    }

                    editor = fpdlElement.getEditor();

                    this.add(editor, BorderLayout.CENTER);
                    
                    break;
                }
            }

            this.revalidate();
            this.repaint();
        }

    }
}
