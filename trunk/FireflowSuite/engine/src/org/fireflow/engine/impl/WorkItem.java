package org.fireflow.engine.impl;

// Generated Feb 23, 2008 12:04:21 AM by Hibernate Tools 3.2.0.b9

import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.Set;

import org.fireflow.engine.EngineException;
import org.fireflow.engine.ITaskInstance;
import org.fireflow.engine.IWorkItem;
import org.fireflow.engine.RuntimeContext;
import org.fireflow.engine.persistence.IPersistenceService;
import org.fireflow.kenel.KenelException;

/**
 * WorkItem generated by hbm2java
 */

public class WorkItem implements IWorkItem,java.io.Serializable {
	private String actorId;
	private String id;
	private Integer state = null;
	private Date createdTime;
	private Date acceptedTime;
	private Date endTime;
	private String comments;
	private ITaskInstance taskInstance;

	public WorkItem() {
	}

	public WorkItem(TaskInstance taskInstance) {
		this.taskInstance = taskInstance;
	}

	public WorkItem(Integer state, Date createdTime, Date acceptedTime,
			Date endTime, String comments, TaskInstance taskInstance) {
		this.state = state;
		this.createdTime = createdTime;
		this.acceptedTime = acceptedTime;
		this.endTime = endTime;
		this.comments = comments;
		this.taskInstance = taskInstance;
	}

	public String getId() {
		return this.id;
	}

	public void setId(String id) {
		this.id = id;
	}

	public Integer getState() {
		return this.state;
	}

	public void setState(Integer state) {
		this.state = state;
	}

	public Date getCreatedTime() {
		return this.createdTime;
	}

	public void setCreatedTime(Date createdTime) {
		this.createdTime = createdTime;
	}

	public Date getAcceptedTime() {
		return this.acceptedTime;
	}

	public void setAcceptedTime(Date acceptedTime) {
		this.acceptedTime = acceptedTime;
	}

	public Date getEndTime() {
		return this.endTime;
	}

	public void setEndTime(Date endTime) {
		this.endTime = endTime;
	}

	public String getComments() {
		return this.comments;
	}

	public void setComments(String comments) {
		this.comments = comments;
	}

	public ITaskInstance getTaskInstance() {
		return this.taskInstance;
	}

	public void setTaskInstance(ITaskInstance taskInstance) {
		this.taskInstance = taskInstance;
	}

	public String getActorId() {
		return actorId;
	}

	public void setActorId(String actorId) {
		this.actorId = actorId;
	}
	public void complete()throws  EngineException,KenelException{
		if(this.getState().intValue()!=IWorkItem.STARTED){
//			System.out.println("WorkItem的当前状态为"+this.getState()+"，不可以执行complete操作。");
			throw new EngineException("WorkItem的当前状态为"+this.getState()+"，不可以执行complete操作。");
		}
		RuntimeContext ctx = RuntimeContext.getInstance();
		IPersistenceService persistenceService = ctx.getPersistenceService();
		
		this.setState(IWorkItem.COMPLETED);
		this.setEndTime(ctx.getSysDate());
		persistenceService.updateWorkItem(this);
		
		this.getTaskInstance().complete();
	}
	public void complete(List<String> nextTransitionNames)throws  EngineException,KenelException{
		if(this.getState().intValue()!=IWorkItem.STARTED){
			new EngineException("WorkItem的当前状态为"+this.getState()+"，不可以执行complete操作。");
		}
	}
	public void complete(String nextTransitionName,List<String> nextActorIds,boolean asignToEveryone)throws EngineException{
		if(this.getState().intValue()!=IWorkItem.STARTED){
			new EngineException("WorkItem的当前状态为"+this.getState()+"，不可以执行complete操作。");
		}
	}
	public void reasign(String actorId){
		
	}
	public void accept()throws  EngineException,KenelException{
		
		if (this.getState().intValue()!=IWorkItem.INITIALIZED){
			throw new EngineException("WorkItem的当前状态为"+this.getState()+"，不可以执行accept操作。");
		}
		if (this.getTaskInstance().getState().intValue()!=ITaskInstance.INITIALIZED
				&& this.getTaskInstance().getState().intValue()!=ITaskInstance.STARTED){
			throw new EngineException("TaskInstance的当前状态为"+this.getTaskInstance().getState()+"，对应的WorkItem不可以执行accept操作。");
		}
		
		RuntimeContext ctx = RuntimeContext.getInstance();
		IPersistenceService persistenceService = ctx.getPersistenceService();
		
		//0、首先修改workitem的状态
		this.setState(IWorkItem.STARTED);
		this.setAcceptedTime(ctx.getSysDate());
		persistenceService.updateWorkItem(this);
		
		//2、start taskInstance,修改相关联的workItem的状态。
		this.getTaskInstance().start();

	}
}
