package org.fireflow.engine.impl;

// Generated Feb 23, 2008 12:04:21 AM by Hibernate Tools 3.2.0.b9
import java.util.Date;
import java.util.List;
import java.util.Map;
import org.fireflow.engine.EngineException;
import org.fireflow.engine.IProcessInstance;
import org.fireflow.engine.ITaskInstance;
import org.fireflow.engine.RuntimeContext;
import org.fireflow.engine.ou.IAssignable;
import org.fireflow.engine.persistence.IPersistenceService;
import org.fireflow.engine.IWorkItem;
import org.fireflow.kenel.IActivityInstance;
import org.fireflow.kenel.IToken;
import org.fireflow.kenel.KenelException;
import org.fireflow.model.DataField;
import org.fireflow.model.Task;
import org.fireflow.model.WorkflowProcess;
import org.fireflow.model.net.Activity;
import org.fireflow.model.reference.SubWorkflowProcess;

/**
 * TaskInstance generated by hbm2java
 */
public class TaskInstance implements ITaskInstance, IAssignable, java.io.Serializable {

    private String id = null;
    private String taskId = null;
    private String activityId = null;
    private String name = null;
    private String displayName = null;
    private Integer state = null;
    private Date createdTime = null;
    private Date startedTime = null;
    private Date expiredTime = null;
    private Date endTime = null;
    private String completionStrategy = null;
    private IProcessInstance processInsatnce = null;
//	private Set workItems = new HashSet(0);
    private String taskType = null;

    public String getTaskType() {
        return taskType;
    }

    public void setTaskType(String taskType) {
        this.taskType = taskType;
    }

    public TaskInstance() {
    }

    public TaskInstance(ProcessInstance workflowProcessInsatnce) {
        this.processInsatnce = workflowProcessInsatnce;
    }

//	public TaskInstance(String taskId, String activityId, String name,
//			String displayName, Integer state, Date createdTime, Date startedTime,
//			Date expiredTime, Date endTime, Boolean asignToEveryone,
//			ProcessInstance workflowProcessInsatnceId, Set workItems) {
//		this.taskId = taskId;
//		this.activityId = activityId;
//		this.name = name;
//		this.label = displayName;
//		this.state = state;
//		this.createdTime = createdTime;
//		this.startedTime = startedTime;
//		this.expiredTime = expiredTime;
//		this.endTime = endTime;
//		this.asignToEveryone = asignToEveryone;
//		this.processInsatnce = workflowProcessInsatnceId;
//		this.workItems = workItems;
//	}
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTaskId() {
        return this.taskId;
    }

    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    public String getActivityId() {
        return this.activityId;
    }

    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDisplayName() {
        return this.displayName;
    }

    public void setDisplayName(String label) {
        this.displayName = label;
    }

    public Integer getState() {
        return this.state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Date getCreatedTime() {
        return this.createdTime;
    }

    public void setCreatedTime(Date createdTime) {
        this.createdTime = createdTime;
    }

    public Date getStartedTime() {
        return this.startedTime;
    }

    public void setStartedTime(Date startedTime) {
        this.startedTime = startedTime;
    }

    public Date getExpiredTime() {
        return this.expiredTime;
    }

    public void setExpiredTime(Date expiredTime) {
        this.expiredTime = expiredTime;
    }

    public Date getEndTime() {
        return this.endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    public String getCompletionStrategy() {
        return completionStrategy;
    }

    public void setCompletionStrategy(String completionStrategy) {
        this.completionStrategy = completionStrategy;
    }

    public IProcessInstance getProcessInstance() {
        return this.processInsatnce;
    }

    public void setProcessInstance(
            IProcessInstance processInsatnce) {
        this.processInsatnce = processInsatnce;
    }

//	public Set getWorkItems() {
//		return this.workItems;
//	}
//
//	public void setWorkItems(Set workItems) {
//		this.workItems = workItems;
//	}
    public void asignToActor(String id) {
        createWorkItem(id);
    }

    public void asignToActors(List<String> ids) {
        //task应该有一个标志(asignToEveryone)，表明asign的规则
        for (int i = 0; ids != null && i < ids.size(); i++) {
            createWorkItem(ids.get(i));
        }
    }

    protected void createWorkItem(String actorId) {
        RuntimeContext ctx = RuntimeContext.getInstance();
        IPersistenceService persistenceService = ctx.getPersistenceService();

        WorkItem wi = new WorkItem();
        wi.setTaskInstance(this);
        wi.setActorId(actorId);
        wi.setState(IWorkItem.INITIALIZED);
        wi.setCreatedTime(ctx.getSysDate());

        persistenceService.saveWorkItem(wi);

//		this.getWorkItems().add(wi);
//		wi.setAsignToEveryone(asignToEveryone);
    //保存到数据库
    }

    public void complete() throws EngineException, KenelException {
        RuntimeContext ctx = RuntimeContext.getInstance();
        IPersistenceService persistenceService = ctx.getPersistenceService();

        //第一步，首先结束当前taskInstance
        List<IWorkItem> workItemsList = persistenceService.findWorkItemsForTaskInstance(this);
        boolean taskInstanceCanBeCompleted = true;
        for (int i = 0; workItemsList != null && i < workItemsList.size(); i++) {
            IWorkItem wi = workItemsList.get(i);
            if (wi.getState().intValue() == IWorkItem.INITIALIZED || wi.getState().intValue() == IWorkItem.STARTED) {
                taskInstanceCanBeCompleted = false;
                break;
            }
        }
        if (!taskInstanceCanBeCompleted) {
            return;
        }

        this.setState(ITaskInstance.COMPLETED);
        this.setEndTime(ctx.getSysDate());
        persistenceService.updateTaskInstance(this);

        //第二步，尝试结束对应的activityInstance
        List<IToken> tokens = persistenceService.findTokens(this.getProcessInstance(), this.getActivityId());

        if (tokens == null || tokens.size() == 0) {
            return;//表明activityInstance已经结束了。
        }
        if (tokens.size() > 1) {
            throw new EngineException("与activityId=" + this.getActivityId() + "对应的token数量(=" + tokens.size() + ")不正确，正确值能为1，因此无法完成complete操作");
        }
        IToken token = tokens.get(0);
        if (token.isAlive() == false) {
            throw new EngineException("与activityId=" + this.getActivityId() + "对应的token.alive=false，因此无法完成complete操作");
        }
        Object obj = ctx.getKenelManager().getWFElementInstance(this.getActivityId());
        if (obj == null) {
            throw new EngineException("系统没有找到与activityId=" + this.getActivityId() + "对应activityInstance，无法执行complete操作。");
        }

//		persistenceService.find


        List<ITaskInstance> taskInstanceList = persistenceService.findTaskInstances(this.getProcessInstance(), this.getActivityId());

        boolean activityInstanceCanBeCompleted = true;
        WorkflowProcess workflowProcess = ctx.getDefinitionService().getWorkflowProcessByName(this.getProcessInstance().getName());
        Activity activity = (Activity) workflowProcess.findWFElementById(this.getActivityId());
        System.out.println("++++++++++The completeStrategy is " + activity.getCompletionStrategy());
        if (activity.getCompletionStrategy().equals(Activity.ALL)) {
            for (int i = 0; taskInstanceList != null && i < taskInstanceList.size(); i++) {
                ITaskInstance taskInst = taskInstanceList.get(i);
                if (taskInst.getState().intValue() == ITaskInstance.INITIALIZED || taskInst.getState().intValue() == ITaskInstance.STARTED) {
                    activityInstanceCanBeCompleted = false;
                }
            }
        }

        if (!activityInstanceCanBeCompleted) {
            return;
        }


        ((IActivityInstance) obj).complete(token);

    }

    public void start() throws EngineException, KenelException {
        if (Task.FORM.equals(this.getTaskType())) {
            startManulTask();
        } else if (Task.TOOL.equals(this.getTaskType())) {
            startToolTask();
        } else if (Task.SUBFLOW.equals(this.getTaskType())) {
            startSubflowTask();
        } else {
            throw new EngineException("无法识别的TaskType值，taskType=" + this.getTaskType());
        }
    }

    protected void startManulTask() throws EngineException {
        if (this.getState().intValue() == ITaskInstance.INITIALIZED) {
            RuntimeContext ctx = RuntimeContext.getInstance();
            IPersistenceService persistenceService = ctx.getPersistenceService();

            this.setState(ITaskInstance.STARTED);
            this.setStartedTime(ctx.getSysDate());
            persistenceService.updateTaskInstance(this);
            if (Task.ANY.equals(this.getCompletionStrategy())) {
                List<IWorkItem> workItemsList = persistenceService.findWorkItemsForTaskInstance(this);

                //测试代码（看看session里有些什么对象...begin
//				Session session = (Session)ctx.getCurrentDBSession();
//				System.out.println("session is ==="+session);
                //测试代码...end

                for (int i = 0; workItemsList != null && i < workItemsList.size(); i++) {
                    WorkItem tmpWorkItem = (WorkItem) workItemsList.get(i);
                    if (tmpWorkItem.getState().intValue() == IWorkItem.INITIALIZED) {

                        tmpWorkItem.setState(IWorkItem.CANCELED);
                        tmpWorkItem.setEndTime(ctx.getSysDate());
                        persistenceService.updateWorkItem(tmpWorkItem);
                    }
                }
            }
        }
    }

    protected void startToolTask() throws EngineException {

    }

    public Task getTask() {
        RuntimeContext ctx = RuntimeContext.getInstance();
        return ctx.getDefinitionService().getTaskById(this.getTaskId());
    }

    protected void startSubflowTask() throws EngineException, KenelException {
        Task task = this.getTask();
        SubWorkflowProcess subWorkflowProcess = task.getSubWorkflowProcess();

        RuntimeContext ctx = RuntimeContext.getInstance();
        WorkflowProcess wfProcess = ctx.getDefinitionService().getWorkflowProcessById(subWorkflowProcess.getWorkflowProcessId());

        if (wfProcess == null) {
            throw new EngineException("系统中没有Id为" + subWorkflowProcess.getWorkflowProcessId() + "的流程定义");
        }

        ProcessInstance processInstance = new ProcessInstance();
        processInstance.setProcessId(wfProcess.getId());
        processInstance.setDisplayName(wfProcess.getDisplayName());
        processInstance.setName(wfProcess.getName());
        processInstance.setState(IProcessInstance.INITIALIZED);

        //初始化流程变量,从父实例获得初始值
        Map processVars = this.getProcessInstance().getProcessInstanceVariables();
        List datafields = wfProcess.getDataFields();
        for (int i = 0; datafields != null && i < datafields.size(); i++) {
            DataField df = (DataField) datafields.get(i);
            if (df.getDataType().equals(DataField.STRING)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof String)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    processInstance.setProcessInstanceVariable(df.getName(), df.getInitialValue());
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), "");
                }
            } else if (df.getDataType().equals(DataField.INTEGER)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof Integer)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    try {
                        Integer intValue = new Integer(df.getInitialValue());
                        processInstance.setProcessInstanceVariable(df.getName(), intValue);
                    } catch (Exception e) {

                    }
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), new Integer(0));
                }
            } else if (df.getDataType().equals(DataField.FLOAT)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof Float)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    Float floatValue = new Float(df.getInitialValue());
                    processInstance.setProcessInstanceVariable(df.getName(), floatValue);
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), new Float(0));
                }
            } else if (df.getDataType().equals(DataField.BOOLEAN)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof Boolean)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    Boolean booleanValue = new Boolean(df.getInitialValue());
                    processInstance.setProcessInstanceVariable(df.getName(), booleanValue);
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), Boolean.FALSE);
                }
            } else if (df.getDataType().equals(DataField.DATETIME)) {
            //TODO 需要完善一下
            }
        }

        processInstance.setParentProcessInstanceId(this.getProcessInstance().getId());
        processInstance.setParentTaskInstanceId(this.getId());
        
        ctx.getPersistenceService().saveProcessInstance(processInstance);

        processInstance.run();
    }
}
