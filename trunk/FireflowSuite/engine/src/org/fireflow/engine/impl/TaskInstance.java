/**
 * Copyright 2007-2008 非也
 * All rights reserved. 
 * 
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation。
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program. If not, see http://www.gnu.org/licenses. *
 */
package org.fireflow.engine.impl;

// Generated Feb 23, 2008 12:04:21 AM by Hibernate Tools 3.2.0.b9
import java.util.Date;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import org.fireflow.engine.EngineException;
import org.fireflow.engine.IProcessInstance;
import org.fireflow.engine.IRuntimeContextAware;
import org.fireflow.engine.ITaskInstance;
import org.fireflow.engine.RuntimeContext;
import org.fireflow.engine.ou.IAssignable;
import org.fireflow.engine.persistence.IPersistenceService;
import org.fireflow.engine.IWorkItem;
import org.fireflow.engine.IWorkflowSession;
import org.fireflow.engine.IWorkflowSessionAware;
import org.fireflow.engine.IWorkflowSessionCallback;
import org.fireflow.engine.definition.WorkflowDefinition;
import org.fireflow.engine.event.ITaskInstanceEventListener;
import org.fireflow.engine.event.TaskInstanceEvent;
import org.fireflow.engine.taskinstance.IApplicationHandler;
import org.fireflow.kenel.IActivityInstance;
import org.fireflow.kenel.INetInstance;
import org.fireflow.kenel.IToken;
import org.fireflow.kenel.KenelException;
import org.fireflow.model.DataField;
import org.fireflow.model.EventListener;
import org.fireflow.model.Task;
import org.fireflow.model.WorkflowProcess;
import org.fireflow.model.net.Activity;
import org.fireflow.model.reference.SubWorkflowProcess;

/**
 * TaskInstance generated by hbm2java
 */
public class TaskInstance implements ITaskInstance, IAssignable, IRuntimeContextAware, IWorkflowSessionAware, java.io.Serializable {

    private String id = null;
    private String taskId = null;
    private String activityId = null;
    private String name = null;
    private String displayName = null;
    private Integer state = null;
    private Date createdTime = null;
    private Date startedTime = null;
    private Date expiredTime = null;
    private Date endTime = null;
    private String completionStrategy = null;
    private String processInstanceId = null;
    private String processId = null;
    private Integer version = null;
//	private Set workItems = new HashSet(0);
    private String taskType = null;
    protected transient RuntimeContext rtCtx = null;
    protected transient IWorkflowSession workflowSession = null;
    private transient IProcessInstance processInsatance = null;

    public void setRuntimeContext(RuntimeContext ctx) {
        this.rtCtx = ctx;
    }

    public RuntimeContext getRuntimeContext() {
        return this.rtCtx;
    }

    public String getTaskType() {
        return taskType;
    }

    public void setTaskType(String taskType) {
        this.taskType = taskType;
    }

    public TaskInstance() {
    }

    public TaskInstance(ProcessInstance workflowProcessInsatnce) {
        this.processInsatance = workflowProcessInsatnce;
    }

//	public TaskInstance(String taskId, String activityId, String name,
//			String displayName, Integer state, Date createdTime, Date startedTime,
//			Date expiredTime, Date endTime, Boolean asignToEveryone,
//			ProcessInstance workflowProcessInsatnceId, Set workItems) {
//		this.taskId = taskId;
//		this.activityId = activityId;
//		this.name = name;
//		this.label = displayName;
//		this.state = state;
//		this.createdTime = createdTime;
//		this.startedTime = startedTime;
//		this.expiredTime = expiredTime;
//		this.endTime = endTime;
//		this.asignToEveryone = asignToEveryone;
//		this.processInsatnce = workflowProcessInsatnceId;
//		this.workItems = workItems;
//	}
    public String getId() {
        return this.id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getTaskId() {
        return this.taskId;
    }

    public void setTaskId(String taskId) {
        this.taskId = taskId;
    }

    public String getActivityId() {
        return this.activityId;
    }

    public void setActivityId(String activityId) {
        this.activityId = activityId;
    }

    public String getName() {
        return this.name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getDisplayName() {
        return this.displayName;
    }

    public void setDisplayName(String label) {
        this.displayName = label;
    }

    public Integer getState() {
        return this.state;
    }

    public void setState(Integer state) {
        this.state = state;
    }

    public Date getCreatedTime() {
        return this.createdTime;
    }

    public void setCreatedTime(Date createdTime) {
        this.createdTime = createdTime;
    }

    public Date getStartedTime() {
        return this.startedTime;
    }

    public void setStartedTime(Date startedTime) {
        this.startedTime = startedTime;
    }

    public Date getExpiredTime() {
        return this.expiredTime;
    }

    public void setExpiredTime(Date expiredTime) {
        this.expiredTime = expiredTime;
    }

    public Date getEndTime() {
        return this.endTime;
    }

    public void setEndTime(Date endTime) {
        this.endTime = endTime;
    }

    public String getAssignmentStrategy() {
        return completionStrategy;
    }

    public void setAssignmentStrategy(String completionStrategy) {
        this.completionStrategy = completionStrategy;
    }

    public IProcessInstance getProcessInstance() {
        if (this.processInsatance != null) {
            ((IWorkflowSessionAware)this.processInsatance).setCurrentWorkflowSession(this.workflowSession);
            return this.processInsatance;
        } else {
            try {
                final String procInstId = this.processInstanceId;
                this.processInsatance = (IProcessInstance) this.workflowSession.execute(new IWorkflowSessionCallback() {

                    public Object doInWorkflowSession(RuntimeContext ctx) throws EngineException, KenelException {
                        return ctx.getPersistenceService().findProcessInstanceById(procInstId);
                    }
                });
            } catch (EngineException ex) {
                Logger.getLogger(TaskInstance.class.getName()).log(Level.SEVERE, null, ex);
            } catch (KenelException ex) {
                Logger.getLogger(TaskInstance.class.getName()).log(Level.SEVERE, null, ex);
            }
            return this.processInsatance;
        }

    }

    /*
    public void setProcessInstance(
    IProcessInstance processInsatnce) {
    this.processInsatnce = processInsatnce;
    if (this.processInsatnce!=null ){
    this.processInstanceId = this.processInsatnce.getId();
    }else {
    this.processInstanceId = null;
    }
    }
     */
//	public Set getWorkItems() {
//		return this.workItems;
//	}
//
//	public void setWorkItems(Set workItems) {
//		this.workItems = workItems;
//	}
    public void asignToActor(String id) throws EngineException, KenelException {
        this.asignToActor(id, true);
    }

    public void asignToActors(List<String> ids) throws EngineException, KenelException {
        //task应该有一个标志(asignToEveryone)，表明asign的规则
        for (int i = 0; ids != null && i < ids.size(); i++) {
            createWorkItem(ids.get(i));
        }
    }

    protected IWorkItem createWorkItem(String actorId) throws EngineException {
        IPersistenceService persistenceService = rtCtx.getPersistenceService();

        WorkItem wi = new WorkItem();
        wi.setTaskInstance(this);
        wi.setActorId(actorId);
        wi.setState(IWorkItem.INITIALIZED);
        wi.setCreatedTime(rtCtx.getCalendarService().getSysDate());
        wi.setRuntimeContext(rtCtx);
        wi.setCurrentWorkflowSession(workflowSession);
        persistenceService.saveOrUpdateWorkItem(wi);
        return wi;
//		this.getWorkItems().add(wi);
//		wi.setAsignToEveryone(asignToEveryone);
    //保存到数据库
    }

    public void complete() throws EngineException, KenelException {
        complete(null);
    }

    public void complete(IActivityInstance targetActivityInstance) throws EngineException, KenelException {
        
        IPersistenceService persistenceService = rtCtx.getPersistenceService();

        //第一步，首先结束当前taskInstance
        List<IWorkItem> workItemsList = persistenceService.findWorkItemsForTaskInstance(this.getId());
        boolean taskInstanceCanBeCompleted = true;
        for (int i = 0; workItemsList != null && i < workItemsList.size(); i++) {
            IWorkItem wi = workItemsList.get(i);
            if (wi.getState().intValue() == IWorkItem.INITIALIZED || wi.getState().intValue() == IWorkItem.STARTED) {
                taskInstanceCanBeCompleted = false;
                break;
            }
        }
        if (!taskInstanceCanBeCompleted) {
            return;
        }

        this.setState(ITaskInstance.COMPLETED);
        this.setEndTime(rtCtx.getCalendarService().getSysDate());
        persistenceService.saveOrUpdateTaskInstance(this);
        //触发相应的事件
        TaskInstanceEvent e = new TaskInstanceEvent();
        e.setEventType(TaskInstanceEvent.AFTER_TASK_INSTANCE_COMPLETE);
        this.fireTaskInstanceEvent(e);
        
        //第二步，尝试结束对应的activityInstance
        List<IToken> tokens = persistenceService.findTokensForProcessInstance(this.getProcessInstanceId(), this.getActivityId());
//        System.out.println("Inside TaskInstance.complete(targetActivityInstance):: tokens.size is "+tokens.size());
        if (tokens == null || tokens.size() == 0) {
            return;//表明activityInstance已经结束了。

        }
        if (tokens.size() > 1) {
            throw new EngineException("与activityId=" + this.getActivityId() + "对应的token数量(=" + tokens.size() + ")不正确，正确值能为1，因此无法完成complete操作");
        }
        IToken token = tokens.get(0);
        if (token.isAlive() == false) {
            throw new EngineException("与activityId=" + this.getActivityId() + "对应的token.alive=false，因此无法完成complete操作");
        }
//        System.out.println("Inside TaskInstance :: this.workflowSession is " + (workflowSession == null ? 0 : workflowSession.hashCode()));

        INetInstance netInstance = rtCtx.getKenelManager().getNetInstance(this.getProcessId(), this.getVersion());
        Object obj = netInstance.getWFElementInstance(this.getActivityId());
        if (obj == null) {
            throw new EngineException("系统没有找到与activityId=" + this.getActivityId() + "对应activityInstance，无法执行complete操作。");
        }

        List<ITaskInstance> taskInstanceList = persistenceService.findTaskInstancesForProcessInstance(this.getProcessInstanceId(), this.getActivityId());

        boolean activityInstanceCanBeCompleted = true;

        WorkflowDefinition workflowDef = rtCtx.getDefinitionService().getWorkflowDefinitionByProcessIdAndVersion(this.getProcessId(), this.getVersion());
        WorkflowProcess workflowProcess = null;

        workflowProcess = workflowDef.getWorkflowProcess();


        Activity activity = (Activity) workflowProcess.findWFElementById(this.getActivityId());
        if (activity.getCompletionStrategy().equals(Activity.ALL)) {
            for (int i = 0; taskInstanceList != null && i < taskInstanceList.size(); i++) {
                ITaskInstance taskInst = taskInstanceList.get(i);
                if (taskInst.getState().intValue() == ITaskInstance.INITIALIZED || taskInst.getState().intValue() == ITaskInstance.STARTED) {
                    activityInstanceCanBeCompleted = false;
                }
            }
        }

        if (!activityInstanceCanBeCompleted) {
            return;
        }

        token.setProcessInstance(this.getProcessInstance());
//        System.out.println("Inside TaskInstance.complete:: token is " + token.hashCode());
//        System.out.println("Inside TaskInstance:: token.getProcessInstance is " + token.getProcessInstance().hashCode());
//        System.out.println("Inside TaskInstance :: this.workflowSession is " + (workflowSession == null ? 0 : workflowSession.hashCode()));

//        System.out.println("Inside TaskInstance.complete(),before call activityInstance.complete:: token is " + token.hashCode());
//        System.out.println("Inside TaskInstance.complete(),before call activityInstance.complete:: token.getProcessInstance is " + token.getProcessInstance().hashCode());
//        System.out.println("Inside TaskInstance.complete(),before call activityInstance.complete:: workflowSession is " + (workflowSession == null ? 0 : workflowSession.hashCode()));


        ((IActivityInstance) obj).complete(token, targetActivityInstance);

    }

    public void start() throws EngineException, KenelException {
        //触发事件
        TaskInstanceEvent e = new TaskInstanceEvent();
        e.setEventType(TaskInstanceEvent.BEFORE_TASK_INSTANCE_START);
        this.fireTaskInstanceEvent(e);

        if (Task.FORM.equals(this.getTaskType())) {
            startManulTask();
        } else if (Task.TOOL.equals(this.getTaskType())) {
            startToolTask();
        } else if (Task.SUBFLOW.equals(this.getTaskType())) {
            startSubflowTask();
        } else {
            throw new EngineException("无法识别的TaskType值，taskType=" + this.getTaskType());
        }
    }

    protected void startManulTask() throws EngineException {
        if (this.getState().intValue() == ITaskInstance.INITIALIZED) {
            IPersistenceService persistenceService = rtCtx.getPersistenceService();

            this.setState(ITaskInstance.STARTED);
            this.setStartedTime(rtCtx.getCalendarService().getSysDate());
            persistenceService.saveOrUpdateTaskInstance(this);
        }
    }

    protected void startToolTask() throws EngineException, KenelException {
        Task task = this.getTask();
        if (task == null) {
            throw new EngineException("The Task is null,can NOT start the taskinstance,");
        }
        if (task.getApplication() == null || task.getApplication().getHandler() == null) {
            throw new EngineException("The task.getApplication() is null or task.getApplication().getHandler() is null,can NOT start the taskinstance,");
        }

        Object obj = rtCtx.getBeanByClassName(task.getApplication().getHandler());

        try {
            ((IApplicationHandler) obj).execute(this);
        } catch (Exception e) {
            //TODO, 对tool类型的task抛出的错误应该怎么处理？
        }
        this.complete();

    }

    public Task getTask() throws EngineException {
        WorkflowDefinition workflowDef = rtCtx.getDefinitionService().getWorkflowDefinitionByProcessIdAndVersion(this.getProcessId(), this.getVersion());
        if (workflowDef == null) {
            return null;
        }
        try {

            return (Task) workflowDef.getWorkflowProcess().findWFElementById(this.getTaskId());
        } catch (EngineException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public Activity getActivity() throws EngineException {
        WorkflowDefinition workflowDef = rtCtx.getDefinitionService().getWorkflowDefinitionByProcessIdAndVersion(this.getProcessId(), this.getVersion());
        if (workflowDef == null) {
            return null;
        }
        try {
            return (Activity) workflowDef.getWorkflowProcess().findWFElementById(this.getActivityId());
        } catch (EngineException ex) {
            ex.printStackTrace();
            return null;
        }
    }

    public WorkflowProcess getWorkflowProcess() throws EngineException {
        WorkflowDefinition workflowDef = rtCtx.getDefinitionService().getWorkflowDefinitionByProcessIdAndVersion(this.getProcessId(), this.getVersion());
        if (workflowDef == null) {
            return null;
        }
        try {

            return workflowDef.getWorkflowProcess();
        } catch (EngineException ex) {
            Logger.getLogger(TaskInstance.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }

    }

    protected IProcessInstance startSubflowTask() throws EngineException, KenelException {
        IPersistenceService persistenceService = rtCtx.getPersistenceService();

        this.setState(ITaskInstance.STARTED);
        this.setStartedTime(rtCtx.getCalendarService().getSysDate());
        persistenceService.saveOrUpdateTaskInstance(this);
        
        Task task = this.getTask();
        SubWorkflowProcess subWorkflowProcess = task.getSubWorkflowProcess();

        WorkflowDefinition workflowDef = rtCtx.getDefinitionService().getTheLatestVersionOfWorkflowDefinition(subWorkflowProcess.getWorkflowProcessId());
        WorkflowProcess wfProcess = workflowDef.getWorkflowProcess();

        if (wfProcess == null) {
            throw new EngineException("系统中没有Id为" + subWorkflowProcess.getWorkflowProcessId() + "的流程定义");
        }
        
        IProcessInstance processInstance = this.workflowSession.createProcessInstance(wfProcess.getName());

//        ProcessInstance processInstance = new ProcessInstance();
//        processInstance.setProcessId(wfProcess.getId());
//        processInstance.setVersion(workflowDef.getVersion());
//        processInstance.setDisplayName(wfProcess.getDisplayName());
//        processInstance.setName(wfProcess.getName());
//        processInstance.setState(IProcessInstance.INITIALIZED);

        //初始化流程变量,从父实例获得初始值
        Map processVars = this.getProcessInstance().getProcessInstanceVariables();
        List datafields = wfProcess.getDataFields();
        for (int i = 0; datafields != null && i < datafields.size(); i++) {
            DataField df = (DataField) datafields.get(i);
            if (df.getDataType().equals(DataField.STRING)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof String)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    processInstance.setProcessInstanceVariable(df.getName(), df.getInitialValue());
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), "");
                }
            } else if (df.getDataType().equals(DataField.INTEGER)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof Integer)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    try {
                        Integer intValue = new Integer(df.getInitialValue());
                        processInstance.setProcessInstanceVariable(df.getName(), intValue);
                    } catch (Exception e) {
                    }
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), new Integer(0));
                }
            } else if (df.getDataType().equals(DataField.FLOAT)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof Float)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    Float floatValue = new Float(df.getInitialValue());
                    processInstance.setProcessInstanceVariable(df.getName(), floatValue);
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), new Float(0));
                }
            } else if (df.getDataType().equals(DataField.BOOLEAN)) {
                if (processVars.get(df.getName()) != null && (processVars.get(df.getName()) instanceof Boolean)) {
                    processInstance.setProcessInstanceVariable(df.getName(), processVars.get(df.getName()));
                } else if (df.getInitialValue() != null) {
                    Boolean booleanValue = new Boolean(df.getInitialValue());
                    processInstance.setProcessInstanceVariable(df.getName(), booleanValue);
                } else {
                    processInstance.setProcessInstanceVariable(df.getName(), Boolean.FALSE);
                }
            } else if (df.getDataType().equals(DataField.DATETIME)) {
                //TODO 需要完善一下
            }
        }

        ((ProcessInstance)processInstance).setParentProcessInstanceId(this.getProcessInstanceId());
        ((ProcessInstance)processInstance).setParentTaskInstanceId(this.getId());

        processInstance.run();
        
        rtCtx.getPersistenceService().saveOrUpdateProcessInstance(processInstance);
        
        return processInstance;
    }

    /**
     * 触发task instance相关的事件
     * @param e
     * @throws org.fireflow.engine.EngineException
     */
    protected void fireTaskInstanceEvent(TaskInstanceEvent e) throws EngineException {
        Task task = this.getTask();
        if (task == null) {
            return;
        }

        List listeners = task.getEventListeners();
        for (int i = 0; i < listeners.size(); i++) {
            EventListener listener = (EventListener) listeners.get(i);
            Object obj = rtCtx.getBeanByClassName(listener.getClassName());
            if (obj != null && (obj instanceof ITaskInstanceEventListener)) {
                ((ITaskInstanceEventListener) obj).onTaskInstanceFired(e);
            }
        }
    }

    public void abort() throws EngineException, KenelException {
    }

    public void asignToActor(String id, boolean needSign) throws EngineException, KenelException {
        IWorkItem wi = createWorkItem(id);
        if (!needSign) {
            wi.sign();
        }
    }

    public IWorkflowSession getCurrentWorkflowSession() {
        return this.workflowSession;
    }

    public void setCurrentWorkflowSession(IWorkflowSession session) {
        this.workflowSession = session;
    }

    public String getProcessInstanceId() {
        return this.processInstanceId;
    }

    public void setProcessInstanceId(String s) {
        this.processInstanceId = s;
    }

    public String getProcessId() {
        return this.processId;
    }

    public void setProcessId(String s) {
        this.processId = s;
    }

    public Integer getVersion() {
        return this.version;
    }

    public void setVersion(Integer v) {
        this.version = v;
    }
}
