using System;
using System.Collections.Generic;
using System.Text;
using FireWorkflow.Net.Engine;
using FireWorkflow.Net.Engine.Definition;
using FireWorkflow.Net.Engine.Persistence;
using FireWorkflow.Net.Engine.Taskinstance;
using FireWorkflow.Net.Model;
using FireWorkflow.Net.Model.Net;
using FireWorkflow.Net.Kernel;

namespace FireWorkflow.Net.Engine.Impl
{
    /**
 * TaskInstance generated by hbm2java
 */
    [Serializable]
    public class TaskInstance : ITaskInstance, IAssignable, IRuntimeContextAware, IWorkflowSessionAware
    {
        /// <summary>返回或设置任务实例的Id</summary>
        public String Id { get; set; }

        /// <summary>返回或设置对应的任务Id</summary>
        public String TaskId { get; set; }

        /// <summary>返回或设置</summary>
        private String ActivityId = null;

        /// <summary>返回或设置</summary>
        private String name = null;

        /// <summary>返回或设置</summary>
        private String displayName = null;

        /// <summary>返回或设置</summary>
        public TaskInstanceStateEnum State { get; set; }

        /// <summary>返回或设置</summary>
        private Boolean suspended = false;

        /// <summary>返回或设置</summary>
        private DateTime? createdTime = null;

        /// <summary>返回或设置</summary>
        private DateTime? startedTime = null;

        /// <summary>返回或设置</summary>
        private DateTime? expiredTime = null;

        /// <summary>返回或设置</summary>
        private DateTime? endTime = null;

        /// <summary>返回或设置</summary>
        private FormTaskEnum assignmentStrategy;

        /// <summary>返回或设置</summary>
        private String processInstanceId = null;

        /// <summary>返回或设置</summary>
        private String processId = null;

        /// <summary>返回或设置</summary>
        private Int32 version ;
        //	private Set workItems = new HashSet(0);

        /// <summary>返回或设置</summary>
        private TaskTypeEnum taskType;

        /// <summary>返回或设置</summary>
        private String targetActivityId = null;

        /// <summary>返回或设置</summary>
        private String fromActivityId = null;
        //    private String tokenId = null;

        /// <summary>返回或设置</summary>
        private Int32 stepNumber ;

        /// <summary>返回或设置</summary>
        private Boolean canBeWithdrawn = true;

        //[NonSerialized]
        public RuntimeContext RuntimeContext { get; set; }

        public IWorkflowSession CurrentWorkflowSession { get; set; }

        [NonSerialized]
        private IProcessInstance processInsatance = null;

        public TaskTypeEnum getTaskType()
        {
            return taskType;
        }

        public void setTaskType(TaskTypeEnum taskType)
        {
            this.taskType = taskType;
        }

        public TaskInstance()
        {
            this.State = TaskInstanceStateEnum.INITIALIZED;
            this.suspended = false;
        }

        public TaskInstance(ProcessInstance workflowProcessInsatnce)
        {
            this.State = TaskInstanceStateEnum.INITIALIZED;
            this.suspended = false;
            this.processInsatance = workflowProcessInsatnce;
        }

        //	public TaskInstance(String taskId, String activityId, String name,
        //			String displayName, Int32 state, DateTime createdTime, DateTime startedTime,
        //			DateTime expiredTime, DateTime endTime, Boolean asignToEveryone,
        //			ProcessInstance workflowProcessInsatnceId, Set workItems) {
        //		this.taskId = taskId;
        //		this.activityId = activityId;
        //		this.name = name;
        //		this.label = displayName;
        //		this.state = state;
        //		this.createdTime = createdTime;
        //		this.startedTime = startedTime;
        //		this.expiredTime = expiredTime;
        //		this.endTime = endTime;
        //		this.asignToEveryone = asignToEveryone;
        //		this.processInsatnce = workflowProcessInsatnceId;
        //		this.workItems = workItems;
        //	}


        public String getActivityId()
        {
            return this.ActivityId;
        }

        public void setActivityId(String activityId)
        {
            this.ActivityId = activityId;
        }

        public String getName()
        {
            return this.name;
        }

        public void setName(String name)
        {
            this.name = name;
        }

        public String getDisplayName()
        {
            return this.displayName;
        }

        public void setDisplayName(String label)
        {
            this.displayName = label;
        }

        public DateTime? getCreatedTime()
        {
            return this.createdTime;
        }

        public void setCreatedTime(DateTime createdTime)
        {
            this.createdTime = createdTime;
        }

        public DateTime? getStartedTime()
        {
            return this.startedTime;
        }

        public void setStartedTime(DateTime startedTime)
        {
            this.startedTime = startedTime;
        }

        public DateTime? getExpiredTime()
        {
            return this.expiredTime;
        }

        public void setExpiredTime(DateTime expiredTime)
        {
            this.expiredTime = expiredTime;
        }

        public DateTime? getEndTime()
        {
            return this.endTime;
        }

        public void setEndTime(DateTime endTime)
        {
            this.endTime = endTime;
        }

        public FormTaskEnum getAssignmentStrategy()
        {
            return assignmentStrategy;
        }

        public void setAssignmentStrategy(FormTaskEnum completionStrategy)
        {
            this.assignmentStrategy = completionStrategy;
        }

        public Boolean IsSuspended()
        {
            return suspended;
        }

        public Boolean? getSuspended()
        {
            return suspended;
        }
        public void setSuspended(Boolean suspended)
        {
            this.suspended = suspended;
        }




        public IProcessInstance getAliveProcessInstance()
        {
            if (this.processInsatance == null)
            {
                if (this.RuntimeContext != null)
                {
                    IPersistenceService persistenceService = this.RuntimeContext.PersistenceService;
                    this.processInsatance = persistenceService.findAliveProcessInstanceById(this.processInstanceId);
                }
            }
            if (this.processInsatance != null)
            {
                if (this.CurrentWorkflowSession != null)
                {
                    ((IWorkflowSessionAware)this.processInsatance).CurrentWorkflowSession = this.CurrentWorkflowSession;
                }
                if (this.RuntimeContext != null)
                {
                    ((IRuntimeContextAware)this.processInsatance).RuntimeContext = this.RuntimeContext;
                }

            }
            return this.processInsatance;
        }

        /*
        public void setProcessInstance(
        IProcessInstance processInsatnce) {
        this.processInsatnce = processInsatnce;
        if (this.processInsatnce!=null ){
        this.processInstanceId = this.processInsatnce.getId();
        }else {
        this.processInstanceId = null;
        }
        }
         */
        //	public Set getWorkItems() {
        //		return this.workItems;
        //	}
        //
        //	public void setWorkItems(Set workItems) {
        //		this.workItems = workItems;
        //	}
        public IWorkItem asignToActor(String id)// throws EngineException, KernelException 
        {
            ITaskInstanceManager taskInstanceMgr = this.RuntimeContext.TaskInstanceManager;
            WorkItem wi = taskInstanceMgr.createWorkItem(this.CurrentWorkflowSession, this.getAliveProcessInstance(), this, id);
            return wi;
        }

        public List<IWorkItem> asignToActors(List<String> ids)// throws EngineException, KernelException 
        {
            //task应该有一个标志(asignToEveryone)，表明asign的规则
            List<IWorkItem> workItemList = new List<IWorkItem>();
            for (int i = 0; ids != null && i < ids.Count; i++)
            {
                ITaskInstanceManager taskInstanceMgr = this.RuntimeContext.TaskInstanceManager;
                WorkItem wi = taskInstanceMgr.createWorkItem(this.CurrentWorkflowSession, this.getAliveProcessInstance(), this, ids[i]);
                wi.CurrentWorkflowSession = this.CurrentWorkflowSession;
                workItemList.Add(wi);
            }
            return workItemList;
        }

        public Task getTask()// throws EngineException 
        {
            if (this.RuntimeContext == null) return null; //System.out.println("====Inside taskInstance this.RuntimeContext is null");
            IDefinitionService definitionService = this.RuntimeContext.DefinitionService;
            if (definitionService == null) return null;//System.out.println("====Inside taskInstance definitionService is null");
            WorkflowDefinition workflowDef = definitionService.GetWorkflowDefinitionByProcessIdAndVersionNumber(this.getProcessId(), this.getVersion());
            if (workflowDef == null)
            {
                return null;
            }

            return (Task)workflowDef.getWorkflowProcess().findWFElementById(this.getTaskId());

        }

        public Activity getActivity()
        {
            WorkflowDefinition workflowDef = this.RuntimeContext.DefinitionService.GetWorkflowDefinitionByProcessIdAndVersionNumber(this.getProcessId(), this.getVersion());
            if (workflowDef == null)
            {
                return null;
            }
            return (Activity)workflowDef.getWorkflowProcess().findWFElementById(this.getActivityId());
        }

        public WorkflowProcess getWorkflowProcess()
        {
            WorkflowDefinition workflowDef = this.RuntimeContext.DefinitionService.GetWorkflowDefinitionByProcessIdAndVersionNumber(this.getProcessId(), this.getVersion());
            if (workflowDef == null)
            {
                return null;
            }

            return workflowDef.getWorkflowProcess();
        }

        public /*final*/ void start()
        {
            ITaskInstanceManager taskInstanceMgr = this.RuntimeContext.TaskInstanceManager;
            taskInstanceMgr.startTaskInstance(this.CurrentWorkflowSession, this.getAliveProcessInstance(), this);
            //        taskInstanceMgr.startTaskInstance(this);
        }

        public void complete(IActivityInstance targetActivityInstance)
        {
            ITaskInstanceManager taskInstanceMgr = this.RuntimeContext.TaskInstanceManager;
            taskInstanceMgr.completeTaskInstance(this.CurrentWorkflowSession, this.getAliveProcessInstance(), this, targetActivityInstance);
            //        taskInstanceMgr.completeTaskInstance(this, targetActivityInstance);
        }

        /*
            public IWorkItem asignToActor(String id, Boolean needClaim) throws EngineException, KernelException {
                ITaskInstanceManager taskInstanceMgr = this.this.RuntimeContext.TaskInstanceManager;
                WorkItem wi = taskInstanceMgr.createWorkItem(this, id);
                if (!needClaim) {
                    wi.claim();
                }
                return wi;
            }
        */

        public String getProcessInstanceId()
        {
            return this.processInstanceId;
        }

        public void setProcessInstanceId(String s)
        {
            this.processInstanceId = s;
        }

        public String getProcessId()
        {
            return this.processId;
        }

        public void setProcessId(String s)
        {
            this.processId = s;
        }

        public Int32 getVersion()
        {
            return this.version;
        }

        public void setVersion(Int32 v)
        {
            this.version = v;
        }

        public String getTargetActivityId()
        {
            return this.targetActivityId;
        }

        public void setTargetActivityId(String s)
        {
            this.targetActivityId = s;
        }

        public Int32 getStepNumber()
        {
            return this.stepNumber;
        }

        public void setStepNumber(Int32 i)
        {
            this.stepNumber = i;
        }

        public Boolean getCanBeWithdrawn()
        {
            return canBeWithdrawn;
        }

        public void setCanBeWithdrawn(Boolean canBeWithdrawn)
        {
            this.canBeWithdrawn = canBeWithdrawn;
        }

        public String getFromActivityId()
        {
            return fromActivityId;
        }

        public void setFromActivityId(String fromActivityId)
        {
            this.fromActivityId = fromActivityId;
        }

        public void suspend()
        {
            if (this.State == TaskInstanceStateEnum.COMPLETED || this.State == TaskInstanceStateEnum.CANCELED)
            {
                throw new EngineException(this.getAliveProcessInstance(), this.getTask(), "The task instance can not be suspended,the state of this task instance is " + this.State);
            }
            if (this.IsSuspended())
            {
                return;
            }
            this.setSuspended(true);
            IPersistenceService persistenceService = this.RuntimeContext.PersistenceService;
            persistenceService.saveOrUpdateTaskInstance(this);
        }

        public void restore()
        {
            if (this.State == TaskInstanceStateEnum.COMPLETED || this.State == TaskInstanceStateEnum.CANCELED)
            {
                throw new EngineException(this.getAliveProcessInstance(), this.getTask(), "The task instance can not be restored,the state of this task instance is " + this.State);
            }
            if (!this.IsSuspended())
            {
                return;
            }
            this.setSuspended(false);
            IPersistenceService persistenceService = this.RuntimeContext.PersistenceService;
            persistenceService.saveOrUpdateTaskInstance(this);
        }


        //    public String getTokenId() {
        //        return tokenId;
        //    }
        //
        //    public void setTokenId(String tokenId) {
        //        this.tokenId = tokenId;
        //    }
    }
}
