using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using FireWorkflow.Net.Kernel.Impl;
using FireWorkflow.Net.Engine;
using FireWorkflow.Net.Engine.Impl;


namespace FireWorkflow.Net.Kernel.Impl
{
    /**
 * JoinPoint generated by hbm2java
 */
    [Serializable]
    public class JoinPoint : IJoinPoint
    {

        private String id;
        private String synchronizerId;
        private Int32? value=null;
        private Boolean alive = false;
        private String processInstanceId = null;
        //	private Set<String> appointedTransitionNames = new HashSet<String>(0);
        [NonSerialized]
        private IProcessInstance processInstance;

        private Int32? stepNumber = null;

        private String fromActivityId = null;

        public JoinPoint()
        {
        }

        public JoinPoint(ProcessInstance processInstance)
        {
            this.processInstance = processInstance;
        }

        /*
	public JoinPoint(String synchronizerID, Int32 value, Boolean alive,
			Set<String> appointedTransitionNames, ProcessInstance processInstance) {
		this.synchronizerId = synchronizerID;
		this.value = value;
		this.alive = alive;
//		this.appointedTransitionNames = appointedTransitionNames;
		this.processInstance = processInstance;
	}
         */
        public String getId()
        {
            return this.id;
        }

        public void setId(String id)
        {
            this.id = id;
        }
        public String getSynchronizerId()
        {
            return this.synchronizerId;
        }

        public void setSynchronizerId(String synchronizerId)
        {
            this.synchronizerId = synchronizerId;
        }

        public Int32? getValue()
        {
            return this.value;
        }

        public void setValue(Int32 value)
        {
            this.value = value;
        }

        public void addValue(Int32 v)
        {
            if (this.value == null)
            {
                this.value = v;
            }
            else
            {
                this.value = this.value + v;
            }
        }

        public Boolean getAlive()
        {
            return this.alive;
        }

        public void setAlive(Boolean alive)
        {
            this.alive = alive;
        }

        //	public Set<String> getAppointedTransitionNames() {
        //		return this.appointedTransitionNames;
        //	}
        //
        //	public void setAppointedTransitionNames(Set<String> appointedTransitionNames) {
        //		this.appointedTransitionNames = appointedTransitionNames;
        //	}

        public IProcessInstance getProcessInstance()
        {
            return this.processInstance;
        }

        public void setProcessInstance(IProcessInstance processInstance)
        {
            this.processInstance = processInstance;
            if (this.processInstance != null)
            {
                this.processInstanceId = processInstance.getId();
            }
            else
            {
                this.processInstanceId = null;
            }
        }

        public String getProcessInstanceId()
        {
            return this.processInstanceId;
        }

        public void setProcessInstanceId(String id)
        {
            this.processInstanceId = id;
        }

        public Int32? getStepNumber()
        {
            return this.stepNumber;
        }

        public void setStepNumber(Int32 i)
        {
            this.stepNumber = i;
        }

        public String getFromActivityId()
        {
            return this.fromActivityId;
        }

        public void setFromActivityId(String s)
        {
            this.fromActivityId = s;
        }
        //	public void addAppointedTransitionNames(Set<String> arg){
        //		appointedTransitionNames.addAll(arg);
        //	}

        #region IJoinPoint 成员


        int IJoinPoint.getStepNumber()
        {
            throw new NotImplementedException();
        }

        #endregion
    }

}
